{"version":3,"sources":["components/AddCategoria.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategoria","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","propType","PropTypes","func","isRequired","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","imagenes","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"sMAGaA,EAAe,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAG5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAOC,SAbU,SAACC,GAElBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,aA0BhCZ,EAAae,SAAW,CACpBd,cAAee,IAAUC,KAAKC,Y,mCClCrBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,8DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAChC,OACI,sBAAKc,UAAU,oCAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,4BAAKA,QCFFO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAEvB,ECFwB,SAAEA,GAE1B,MAA0BlB,mBAAS,CAC/ByB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAoBA,OAfAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAIGqB,EDpB2BK,CAAa1B,GAAnC2B,EAAZ,EAAOpB,KAAea,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEb,qBAAKA,UAAU,YAAf,SAGQW,EAASlB,KAAI,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEfvBiB,EAAe,WAEzB,MAAoC9C,mBAAS,CAAC,cAA9C,mBAAO+C,EAAP,KAAmBhD,EAAnB,KAEA,OACI,qCACI,6CAEA,cAAC,EAAD,CAAcA,cAAgBA,IAC9B,uBAEA,6BAEMgD,EAAWpB,KAAK,SAAAT,GAAS,OACvB,cAAC,EAAD,CAEIA,UAAWA,GADNA,Y,MCX7B8B,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.3e91aef2.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategoria = ( { setCategorias } ) => {\r\n    \r\n    //Estado del INPUT\r\n    const [inputValue, setInputValue] = useState(''); // ''\r\n    //Setear el valor del input\r\n    const handleInputChange = ( e ) => {\r\n        setInputValue( e.target.value );\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        // Para prevenir que el navegador haga un refresh\r\n        e.preventDefault();\r\n\r\n        if ( inputValue.trim().length > 2 ) {\r\n            //El metodo recibe un callback que contiene el estado anterior y le agregamos el nuevo elemento del input.\r\n            setCategorias( cats => [ inputValue, ...cats, ] );\r\n            setInputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        < form onSubmit={ handleSubmit } >\r\n            <input \r\n                type=\"text\"\r\n                value={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategoria.propType = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n\r\n","\r\n\r\nexport const getGifs = async( categoria ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria) }&limit10&api_key=IfCJldXO1ZKvydj4t1icDEGU4SCfrpgz`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"animate__animated animate__fadeIn\">\r\n           <img src={ url } alt={ title }/>\r\n           <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n export const GifGrid = ({ categoria }) => {\r\n\r\n    const {data:imagenes, loading } = useFetchGifs(categoria);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{categoria}</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Cargando...</p> }\r\n\r\n            <div className=\"card-grid\">\r\n      \r\n                {\r\n                    imagenes.map(img => (\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img }\r\n                        />\r\n                    ))\r\n                }\r\n            \r\n            </div>\r\n\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\n\r\n\r\n    // useEffect(()=>{\r\n    //     getGifs(categoria).\r\n    //     then( setimages );\r\n    // }, [categoria])","\r\nimport { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = ( categoria ) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true,\r\n    });\r\n \r\n    useEffect( () => {\r\n\r\n        getGifs( categoria )\r\n            .then(imgs => {\r\n            \r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false,\r\n                });\r\n    })\r\n        \r\n    }, [categoria])\r\n\r\n    \r\n\r\n    return state; // => { data:[], loading: true };\r\n\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport {AddCategoria} from './components/AddCategoria';\r\nimport {GifGrid} from './components/GifGrid';\r\n\r\n export const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategorias] = useState(['One Punch']);\r\n\r\n    return (\r\n        <>\r\n            <h2>Altos Gifs!</h2>\r\n            {/* Le pasamos la propiedad setCategoria y la referencia */}\r\n            <AddCategoria setCategorias={ setCategorias }/> \r\n            <hr/>\r\n          \r\n            <ol>\r\n                { \r\n                  categorias.map( categoria =>(\r\n                    <GifGrid \r\n                        key={categoria}\r\n                        categoria={categoria}\r\n                    />\r\n                  ))\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n//Agregar un elemento a un arreglo\r\n// setElemento([...arreglo, nuevoElemento]);\r\n// setElemento(arreglo => [...arreglo, nuevoElemento]);","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp /> ,\n    document.getElementById('root')\n);"],"sourceRoot":""}